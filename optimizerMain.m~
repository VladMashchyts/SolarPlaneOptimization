%% Setting things up and getting user input
clc; clear all; close all;
format compact
% optimization = input("Enter 1 to run optimization\n");
% sensitivity = input("Enter 1 to run sensitivity study\n");

optimization = 0;
sensitivity = 0;
%% Initializing Power Train Info
% Assuming Samsung 36G 18650s and the solar panels we bought. 

PT.SunData    = 'SunData_060618';% String of text file name of sun data ('SunData_mmddyy')
PT.array_vert = 0;
PT.array_norm = 90;
PT.A          = 0.125^2;        % Area of each solar panel [m2]
PT.wsps       = 0.0075*9.81;     % Weight per area of solar cells (measured from current array)   [N/m^2];
PT.W_s = 100*PT.wsps;           % Estimated total weight of solar array, assuming 100 panels.[N]
PT.eta_solar  = 0.2;            % Solar cell efficiency (from testing). The 
                                % efficiency has already been taken into
                                % account in the Solar_Array_Model
                                % function, when initializing I_nom.

PT.eta_mppt = .95;              % Efficiency of Max Power Point Tracker.
PT.eta_batt = .95;              % Efficiency of battery (will need further testing to validate).
PT.rho_batt = 270;              % Specific energy of battery (will need further testing to validate) [Wh/kg]
PT.batt_range = 0.8;            % Fraction of the batteries capacity that will be used (cannot have full discharge)
PT.e_b_raw = 46656;             % Raw energy of each battery [J].
PT.e_b = PT.e_b_raw*PT.batt_range; % Available Energy.
PT.m_b = 0.048;                 % Mass of each battery cell.
PT.w_b = PT.m_b*9.81;           % Weight of each battery cell.
% PT.eta_cc = .95;

%% Initializing Aero Info
% Possible airfoils: SA7024, MA409. Still using Luke's aero info. 

geom.t_c = 0.15;                % Wing thickness/chord length

aero.alt = 100;                 %Altitude [m]

aero.C_DP = .0050;              %parasitic drag EXCLUDING contribution from wings
aero.h = .2;                    %vertical aspect ratio. Wing separation height/span

aero.k_dp = .005;               %k" value for airfoil. Used for lift-dependent viscous drag approximation 

aero.e = 0.75;                  %spanwise efficiency
aero.C_L_max = 1.1;             %max C_L
aero.eta_prop = 0.6;% 0.60;     %propulsive efficiency - will eventually be replaced with an engine deck.

%% Optimization Script
% Change the independant variables. 

% Independant Variables
n_b     = 100:100:1000;
b       = 5;
AR      = 10;

% Finding sizes of independant variable arrays. 
n_size       = length(n_b);
b_size       = length(b);
AR_size      = length(AR);

% Initializing counters. 
n_count  = 1;
b_count  = 1;
AR_count = 1;

% Initializing storage for intermediate optimization steps. 
n_for_AR_loop = zeros(1, AR_size);
b_for_AR_loop = zeros(1, AR_size);
n_index_4b = zeros(1, b_size);
n_index_4AR = zeros(1, b_size);
b_index_4AR = zeros(1, b_size);
t_batt_AR     = zeros(1, AR_size);

% This part is uncommented and is not really in a good place to be read or
% understood.
if optimization == 1
for AR_count = 1:AR_size
    
    t_batt_b = zeros(1, b_size);
    for b_count = 1:b_size
        t_batt_n = zeros(1,n_size);
        for n_count = 1:n_size
            this_n_b = n_b(n_count);
            this_b = b(b_count);
            aero.AR = AR(AR_count);
            [t_batt, ~, t_rech_night, t_rech_batt] = function2Optimize(this_n_b, this_b, aero.AR, aero, PT, geom);
            t_batt_n(n_count) = t_batt;  % Optimizing metric. 
        end
        [this_n_maxt, max_n_t_index] = max(t_batt_n);
        n_index_4b(b_count) = n_b(max_n_t_index);
        t_batt_b(b_count) = this_n_maxt;
    end
    [this_b_maxt, max_b_t_index] = max(t_batt_b);
    n_index_4AR(AR_count) = n_index_4b(max_b_t_index);
    b_index_4AR(AR_count) = b(max_b_t_index);
    t_batt_AR(AR_count) = this_b_maxt;
end

[this_AR_maxt, max_AR_t_index] = max(t_batt_AR);

n_b = n_index_4AR(max_AR_t_index);
b = b_index_4AR(max_AR_t_index);
aero.AR = AR(max_AR_t_index);

end
%% Non-Optimization/Output Step

% If optimization is not run, the inputs must be initialized.
if optimization ~= 1
n_b     = 100;           % Number of batteries
b       = 5;            % Span
aero.AR = 14;           % Aspect ratio
end

% Find outputs at the desired inputs. 
[t_batt, t_extra, t_rech_night, t_rech_batt, t_day, t_night...
    n_s, M_total, M_e, v] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);

% Display outputs. 
fprintf("----------------------Inputs-----------------------\n")
fprintf("Number of batteries: %d\n", n_b)
fprintf("Wing span..........: %dm\n", b)
fprintf("Aspect Ratio.......: %d\n", aero.AR)
fprintf("-----------------------Misc------------------------\n")
fprintf("Total mass..............: %.1f kg\n", M_total)
fprintf("Empty mass..............: %.1f kg\n", M_e)
fprintf("Battery mass............: %.1f kg\n", M_total-M_e)
fprintf("Battery/Total Mass Ratio: %.2f\n", (M_total-M_e)/M_total)
fprintf("Speed...................: %.1f m/s\n", v)
fprintf("Number of Solar Panels..: %d\n", n_s)
fprintf("-----------------------Outputs---------------------\n")
fprintf("Flight time with only battery: %.1f hrs\n", t_batt)
fprintf("Time to recharge for night...: %.1f hrs\n", t_rech_night)
fprintf("Time to fully recharge.......: %.1f hrs\n", t_rech_batt)
fprintf("-----------------------Margins---------------------\n")
fprintf("Extra flight time with only battery......: %.1f hrs\n", t_extra)
fprintf("Extra daylight after recharging for night: %.1f hrs\n", t_day-t_rech_night)
fprintf("Extra daylight after fully recharging....: %.1f hrs\n", t_day-t_rech_batt)


%% Plotting Sensitivities
% This part is uncommented and is not really in a good place to be read or
% understood. 

if sensitivity == 1
    
% Time of year:
this_SunData = PT.SunData;

SunData = {'SunData_030119', 'SunData_040119', 'SunData_060618', 'SunData_122119'};
dates   = [3 4 6 12];
SD_size = length(SunData);
SD_t_extra = zeros(1, SD_size);
x_axis = zeros(1, SD_size);
for SD_count = 1:SD_size
    this_SD = SunData(SD_count);
    PT.SunData    = this_SD{:};
    [~, SD_t_extra(SD_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
subplot(2, 3, 1);
plot(dates, SD_t_extra, 'x', 'Color', [0, 0.4, 0.7], 'MarkerSize', 10, 'LineWidth', 2);
hold on;
plot(dates, x_axis, 'r', 'LineWidth', 2);
plot(dates(3), SD_t_extra(3), 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Time of Year Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Month of Year");
PT.SunData = 'SunData_060618';  % Return SunData to original value. 

% Altitude:
this_altitude = 100;
aero.alt = this_altitude;
[~, this_alt_t_extra] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
this_altitude = this_altitude*3.2;
altitude = 50:10:200;
alt_size = length(altitude);
alt_t_extra = zeros(1, alt_size);
for alt_count = 1:alt_size
    aero.alt = altitude(alt_count);
    [~, alt_t_extra(alt_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
altitude = altitude*3.2;
subplot(2, 3, 2)
plot(altitude, alt_t_extra, 'LineWidth', 2);
hold on
plot(this_altitude, this_alt_t_extra, 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Altitude Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Altitude [ft]");
aero.alt = this_altitude; % Return Altitude to original value. 

% Propeller Efficiency:
this_eta_prop = aero.eta_prop;
[~, this_ep_t_extra] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
eta_prop = 0.1:0.05:1.0;
ep_size = length(eta_prop);
ep_t_extra = zeros(1, ep_size);
x_axis = zeros(1, ep_size);
for ep_count = 1:ep_size
    aero.eta_prop = eta_prop(ep_count);
    [~, ep_t_extra(ep_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
subplot(2, 3, 3)
plot(eta_prop, ep_t_extra, eta_prop, x_axis, 'r', 'LineWidth', 2);
hold on
plot(this_eta_prop, this_ep_t_extra, 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Propeller Efficiency Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Efficiency");
legend("Sensitivity Study", "Lowest Allowable Flight Time", "Current Position")
newPosition = [0.4 0.4 0.2 0.2];
aero.eta_prop = 0.6; % Return to original value. 

% Battery Efficiency:
% this_eta_batt = PT.eta_batt;
% [this_batt_t_batt, ~, ~, ~, this_t_night] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
% this_br_t_extra = this_batt_t_batt - this_t_night;
% eta_batt = 0.6:0.05:1.0;
% batt_size = length(eta_batt);
% batt_t_batt = zeros(1, batt_size);
% batt_t_night = zeros(1, batt_size);
% x_axis = zeros(1, batt_size);
% for Alt_count = 1:batt_size
%     PT.eta_batt = eta_batt(Alt_count);
%     [batt_t_batt(Alt_count), ~, ~, ~, batt_t_night(Alt_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
% end
% ep_t_extra = batt_t_batt - batt_t_night;
% subplot(2, 3, 4)
% plot(eta_batt, ep_t_extra, eta_batt, x_axis, 'r');
% hold on
% plot(this_eta_batt, this_br_t_extra, 'og', 'MarkerSize', 10);
% title("Battery  Efficiency Sensitivity");
% ylabel("Extra Battery Flight Time [hrs]"); xlabel("Efficiency");
% PT.eta_batt = 0.95; % Return to original value. 

% Battery Discharge Depth:
this_batt_range = PT.batt_range;
PT.e_b = PT.e_b_raw*PT.batt_range; % Available Energy. 
PT.batt_range = this_batt_range;
[~, this_br_t_extra] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
batt_range = 0.4:0.05:1.0;
br_size = length(batt_range);
br_t_extra = zeros(1, br_size);
x_axis = zeros(1, br_size);
for br_count = 1:br_size
    PT.batt_range = batt_range(br_count);
    PT.e_b = PT.e_b_raw*PT.batt_range; % Available Energy. 
    [~, br_t_extra(br_count), ~, ~, ~, ~, br_t_night(br_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
subplot(2, 3, 5)
plot(batt_range, br_t_extra+30, batt_range, x_axis, 'r', 'LineWidth', 2);
hold on
plot(this_batt_range, this_br_t_extra+30, 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Battery  Discharge Depth Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Discharge Depth");
PT.batt_range = this_batt_range; % Return to original value. 
PT.e_b = PT.e_b_raw*PT.batt_range; % Available Energy. 

% Mass Sensitivity
this_mb = PT.m_b;
PT.w_b = PT.m_b*9.81;
[~, this_t_extra, ~, ~, ~, ~, ~, this_M_total] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
mb = 0.04:0.005:0.11;
mb_size = length(mb);
mb_t_extra = zeros(1, mb_size);
mb_M_total = zeros(1, mb_size);
x_axis = zeros(1, mb_size);
for mb_count = 1:mb_size
    PT.m_b = mb(mb_count);
    PT.w_b = PT.m_b*9.81;           % Weight of each battery cell.
    [~, mb_t_extra(mb_count), ~, ~, ~, ~, ~, mb_M_total(mb_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
subplot(2, 3, 6)
plot(mb_M_total, mb_t_extra+30, mb_M_total, x_axis, 'r', 'LineWidth', 2);
hold on
plot(this_M_total, this_t_extra+30, 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Mass Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Total Mass [kg]");
PT.m_b = this_mb; % Return to original value. 
PT.w_b = PT.m_b*9.81;


% Solar Cell Efficiency:
this_eta_solar = PT.eta_solar;
[~, this_sc_t_extra, this_sc_t_rech, ~, this_sc_t_day] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
eta_sc = 0.03:0.01:0.8;
sc_size = length(eta_sc);
sc_t_extra = zeros(1, sc_size);
sc_t_rech = zeros(1, sc_size);
sc_t_day = zeros(1, sc_size);
sc_t_res = zeros(1, sc_size);
x_axis = zeros(1, sc_size);
for sc_count = 1:sc_size
    PT.eta_solar = eta_sc(sc_count);
    [~, sc_t_extra(sc_count), sc_t_rech(sc_count), ~, sc_t_day(sc_count), ~, ~, ~, ~, ~, sc_t_res(sc_count)] = function2Optimize(n_b, b, aero.AR, aero, PT, geom);
end
% sc_t_res = sc_t_day - sc_t_rech
subplot(2, 3, 4);
plot(eta_sc, sc_t_res, eta_sc, x_axis, 'r', 'LineWidth', 2);
title("Alititude Sensitivity");
ylabel("Extra Daylight after Charging [hrs]"); xlabel("Efficiency");
ylim([-10, 10])
PT.eta_solar = this_eta_solar; % Return to original value. 

subplot(2, 3, 2)
hold off
plot(eta_sc, sc_t_extra, eta_sc, x_axis, 'r', 'LineWidth', 2);
hold on
plot(this_eta_solar, this_sc_t_extra, 'og', 'MarkerSize', 10, 'LineWidth', 2);
title("Solar  Efficiency Sensitivity");
ylabel("Extra Battery Flight Time [hrs]"); xlabel("Efficiency");
ylim([-10, 10])

end


